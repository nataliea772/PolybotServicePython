name: Polybot Deploy Dev


on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY_DEV:
        required: true
      DEV_POLYBOT_HOST:
        required: true
      USERNAME:
        required: true
      TELEGRAM_BOT_TOKEN_DEV:
        required: true
      YOLO_SERVER_URL_DEV:
        required: true
      REGION:
        required: true
      S3_BUCKET_NAME_DEV:
        required: true
#      SQS_URL_DEV:
#        required: true
#      TABLE_NAME_DEV:
#        required: true

  workflow_dispatch:
    inputs:
      image:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH

        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          cat > ~/.ssh/config <<EOF
          Host ec2
            HostName ${{ secrets.DEV_POLYBOT_HOST }}
            User ${{ secrets.USERNAME }}
            IdentityFile ~/.ssh/private_key
            StrictHostKeyChecking no
          EOF


      - name: Debug output image
        run: |
          echo "Image passed: ${{ inputs.image }}"


      - name: Trigger Docker Compose remotely
        env:
          YOLO_URL_DEV: ${{ secrets.YOLO_SERVER_URL_DEV }}
        run: |
          
          ssh ec2 <<EOF
          set -e 
          cd ~/polybot
          git fetch origin
          git reset --hard origin/dev
    
          sudo rm -f .env
          touch .env && chmod 644 .env
          
          echo "IMG_NAME=${{ inputs.image }}"  > .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_DEV }}" >> .env
          echo "BOT_APP_URL=${{ secrets.BOT_APP_URL_DEV }}" >> .env
#          echo "BOT_APP_URL=natalie-bot-dev.fursa.click" >> .env
          echo "YOLO_URL=http://$YOLO_URL_DEV:8080" >> .env
          echo "REGION=${{ secrets.REGION }}" >> .env
          echo "BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_DEV }}" >> .env
          echo "POLYBOT_ENV=dev" >> .env
#          echo "SQS_URL=${{ secrets.SQS_URL_DEV }}" >> .env
          echo "CALLBACK_BASE_URL=natalie-bot-dev.fursa.click" >> .env
#          echo "DDB_TABLE_NAME=${{secrets.TABLE_NAME_DEV }}" >> .env
          
          cat .env  # debug output
    
          docker compose -f docker-compose.dev.yaml pull
          docker compose -f docker-compose.dev.yaml up -d
          EOF

#      - name: SSH and deploy using Docker Compose
#        run: |
#          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.DEV_POLYBOT_HOST }} "mkdir -p /home/ubuntu/PolybotServicePython"
#          scp -i key.pem -o StrictHostKeyChecking=no .env ubuntu@${{ secrets.DEV_POLYBOT_HOST }}:/home/ubuntu/PolybotServicePython/.env
#          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.DEV_POLYBOT_HOST }} << 'EOF'
#            echo " Cloning or updating repo"
#
#            cd /home/ubuntu
#
#            if [ ! -d "PolybotServicePython/.git" ]; then
#              rm -rf PolybotServicePython
#              git clone --branch dev https://github.com/nataliea772/PolybotServicePython.git PolybotServicePython
#            else
#              cd PolybotServicePython
#              git fetch origin dev
#              git reset --hard origin/dev
#            fi
#
#            echo " Checking .env file contents on server:"
#            cat .env
#
#            echo "[+] Checking for Docker"
#            if ! command -v docker &> /dev/null; then
#              echo "📦 Installing Docker..."
#              curl -fsSL https://get.docker.com -o get-docker.sh
#              sh get-docker.sh
#              sudo usermod -aG docker $USER
#              newgrp docker
#            else
#              echo "Docker already installed"
#            fi
#
#            echo "🐳 Running Docker Compose for Dev"
#            docker compose -f docker-compose.dev.yaml pull
#            docker compose -f docker-compose.dev.yaml up -d --remove-orphans
#
#            echo "🔍 Verifying OpenTelemetry metrics endpoint"
#            if curl -s http://localhost:8889/metrics | grep -q 'system_cpu_time'; then
#              echo "OpenTelemetry metrics are exposed"
#            else
#              echo "Metrics not available"
#              docker logs $(docker ps -qf "name=otelcol") 2>/dev/null || echo "No otelcol container found"
#            fi
#          EOF
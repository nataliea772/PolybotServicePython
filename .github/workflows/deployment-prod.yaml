name: Polybot Deploy Dev

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string

    secrets:
      SSH_PRIVATE_KEY_PROD:
        required: true
      PROD_POLYBOT_HOST:
        required: true
      TELEGRAM_BOT_TOKEN_PROD:
        required: true
      BOT_APP_URL_PROD:
        required: true
      YOLO_SERVER_URL_PROD:
        required: true
      S3_BUCKET_NAME_PROD:
        required: true

  workflow_dispatch:
    inputs:
      image:
        required: true
        type: string
        description: 'Docker image name to deploy'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download image name artifact (fallback)
        uses: actions/download-artifact@v4
        with:
          name: image-name
          path: ./
        continue-on-error: true

      - name: Setup SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > key.pem
          chmod 600 key.pem

      - name: Determine image name
        id: get-image
        run: |
          # Try input first
          if [ -n "${{ inputs.image }}" ]; then
            IMAGE_NAME="${{ inputs.image }}"
            echo "Using input image: $IMAGE_NAME"
          # Fallback to artifact
          elif [ -f "image_name.txt" ]; then
            IMAGE_NAME=$(cat image_name.txt)
            echo "Using artifact image: $IMAGE_NAME"
          else
            echo "No image name found!"
            exit 1
          fi
          
          echo "image=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo " Final image name: $IMAGE_NAME"

      - name: Create .env file
        run: |
          IMAGE_NAME="${{ steps.get-image.outputs.image }}"
          
          echo "IMG_NAME=$IMAGE_NAME" > .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_PROD }}" >> .env
          echo "BOT_APP_URL=${{ secrets.BOT_APP_URL_PROD }}" >> .env
          echo "YOLO_SERVER_URL=${{ secrets.YOLO_SERVER_URL_PROD }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_PROD }}" >> .env
          
          echo "Contents of .env file:"
          cat .env

      - name: SSH and deploy using Docker Compose
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no .env ubuntu@${{ secrets.PROD_POLYBOT_HOST }}:/home/ubuntu/PolybotServicePython/.env

          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.PROD_POLYBOT_HOST }} << 'EOF'
            echo " Cloning or updating repo"
            if [ -d "PolybotServicePython" ]; then
              cd PolybotServicePython
              git checkout dev
              git pull origin dev
            else
              git clone --branch dev https://github.com/${{ github.repository }} PolybotServicePython
              cd PolybotServicePython
            fi
          
            echo " Checking .env file contents on server:"
            cat .env
                    
            echo "[+] Checking for Docker"
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "Docker already installed"
            fi

            echo "🐳 Running Docker Compose for Dev"
            docker compose -f docker-compose.dev.yaml pull
            docker compose -f docker-compose.dev.yaml up -d --remove-orphans

            echo "🔍 Verifying OpenTelemetry metrics endpoint"
            if curl -s http://localhost:8889/metrics | grep -q 'system_cpu_time'; then
              echo "OpenTelemetry metrics are exposed"
            else
              echo "Metrics not available"
              docker logs $(docker ps -qf "name=otelcol") 2>/dev/null || echo "No otelcol container found"
            fi
          EOF
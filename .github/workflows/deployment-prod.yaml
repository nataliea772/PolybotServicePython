name: Polybot Deploy Prod


on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY_PROD:
        required: true
      PROD_POLYBOT_HOST:
        required: true
      USERNAME:
        required: true
      TELEGRAM_BOT_TOKEN_PROD:
        required: true
      YOLO_SERVER_URL:
        required: true
      REGION:
        required: true
      S3_BUCKET_NAME_PROD:
        required: true
      BOT_APP_URL:
        required: true
  #      SQS_URL_DEV:
#        required: true
#      TABLE_NAME_DEV:
#        required: true



  workflow_dispatch:
    inputs:
      image:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH

        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          cat > ~/.ssh/config <<EOF
          Host ec2
            HostName ${{ secrets.PROD_POLYBOT_HOST }}
            User ${{ secrets.USERNAME }}
            IdentityFile ~/.ssh/private_key
            StrictHostKeyChecking no
          EOF



      - name: Debug output image
        run: |
          echo "Image passed: ${{ inputs.image }}"


      - name: Trigger Docker Compose remotely
        env:
          YOLO_SERVER_URL: ${{ secrets.YOLO_SERVER_URL_PROD }}
        run: |
          ssh ec2 'bash -s' <<'ENDSSH'
          set -e
          if [ ! -d ~/PolybotServicePython ]; then
            git clone https://github.com/nataliea772/PolybotServicePython.git ~/PolybotServicePython
          fi
          cd ~/PolybotServicePython
          git fetch origin
          git reset --hard origin/main
      
          sudo rm -f .env
          touch .env && chmod 644 .env
      
          echo "IMG_NAME=${{ inputs.image }}"  > .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_PROD }}" >> .env
          echo "BOT_APP_URL=${{ secrets.BOT_APP_URL }}" >> .env
          echo "YOLO_SERVER_URL=${{ secrets.YOLO_SERVER_URL }}" >> .env
          echo "REGION=${{ secrets.REGION }}" >> .env
          echo "BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_PROD }}" >> .env
          echo "POLYBOT_ENV=prod" >> .env
      
          echo ".env file content:"
          cat .env
      
          echo "üßπ Cleaning existing docker-compose stack..."
          sudo docker compose -f docker-compose.prod.yaml down --remove-orphans || echo "‚ö†Ô∏è Failed to bring down stack"
      
          echo "üê≥ Docker Compose pull + up"
          sudo docker compose -f docker-compose.prod.yaml pull
          sudo docker compose -f docker-compose.prod.yaml up -d --build
          ENDSSH

